/*
 * Boltzmann 3D, a kinetic theory demonstrator
 * Copyright (C) 2013 Dr. Randall B. Shirts
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package edu.byu.chem.boltzmann.view.simulationsettings.components;

import edu.byu.chem.boltzmann.fullapplication.view.simulationsettings.SimSettingsFullView;
import edu.byu.chem.boltzmann.utils.data.ParticleType;
import edu.byu.chem.boltzmann.utils.Units;
import java.awt.Color;
import java.awt.Dimension;
import javax.swing.JColorChooser;

/**
 *
 * @author Derek Manwaring
 * April 2011
 */
public class TypeDescriptorImpl extends javax.swing.JPanel implements TypeDescriptor {

    final private SimSettingsFullView mainFrame;

    public TypeDescriptorImpl(TypesHeader header, String typeName, SimSettingsFullView mainFrame) {
        this.mainFrame = mainFrame;

        initComponents();

        txtFldName.setText(typeName);

        double colorDouble = (double)Integer.MAX_VALUE - 
                (Math.random() * ((double)Integer.MAX_VALUE - (double)Integer.MIN_VALUE));
        btnColor.setBackground(new Color((int)colorDouble));

        double particles = Math.random() * 10.0 + 3.0;
        spnrNumParticles.setValue((int) particles);

        double mass = Math.random() * 10.0 + 1.0;
        spnrMass.setValue(Math.floor(mass));

        double radius = Math.random() * 2.0 + 0.6;
        spnrRadius.setValue((Math.floor(radius * 10.0)) / 10.0);

        setFieldSizes(header);
    }

    public TypeDescriptorImpl(TypesHeader header, ParticleType type, int numParticles, SimSettingsFullView mainFrame) {
        this.mainFrame = mainFrame;

        initComponents();

        txtFldName.setText(type.displayName);
        btnColor.setBackground(type.defaultColor);
        spnrNumParticles.setValue(numParticles);
        spnrMass.setValue(Math.floor(type.particleMass));
        spnrRadius.setValue(Units.convert("m", "nm", type.particleRadius));

        setFieldSizes(header);
    }

    private void setFieldSizes(TypesHeader header) {
        Dimension sizeTxtFld = txtFldName.getPreferredSize();
        Dimension sizeColorBtn = btnColor.getPreferredSize();
        Dimension sizePartSpnr = spnrNumParticles.getPreferredSize();
        Dimension sizeRadiusSpnr = spnrRadius.getPreferredSize();
        Dimension sizeMassSpnr = spnrMass.getPreferredSize();

        sizeTxtFld.setSize(header.getNameWidth(), sizeTxtFld.height);
        sizeColorBtn.setSize(header.getColorWidth(), sizeColorBtn.height);
        sizePartSpnr.setSize(header.getNumPartWidth(), sizePartSpnr.height);
        sizeRadiusSpnr.setSize(header.getRadiusWidth(), sizeRadiusSpnr.height);
        sizeMassSpnr.setSize(header.getMassWidth(), sizeMassSpnr.height);

        txtFldName.setPreferredSize(sizeTxtFld);
        btnColor.setPreferredSize(sizeColorBtn);
        spnrNumParticles.setPreferredSize(sizePartSpnr);
        spnrRadius.setPreferredSize(sizeRadiusSpnr);
        spnrMass.setPreferredSize(sizeMassSpnr);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtFldName = new javax.swing.JTextField();
        btnColor = new javax.swing.JButton();
        spnrNumParticles = new javax.swing.JSpinner();
        spnrRadius = new javax.swing.JSpinner();
        spnrMass = new javax.swing.JSpinner();
        btnRemoveType = new javax.swing.JButton();

        setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 15, 0));

        txtFldName.setText("Red");
        txtFldName.setPreferredSize(new java.awt.Dimension(150, 28));
        txtFldName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFldNameActionPerformed(evt);
            }
        });
        txtFldName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFldNameFocusLost(evt);
            }
        });
        add(txtFldName);

        btnColor.setBackground(new java.awt.Color(255, 0, 0));
        btnColor.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnColor.setMaximumSize(new java.awt.Dimension(15, 30));
        btnColor.setMinimumSize(new java.awt.Dimension(15, 30));
        btnColor.setOpaque(true);
        btnColor.setPreferredSize(new java.awt.Dimension(56, 20));
        btnColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnColorActionPerformed(evt);
            }
        });
        add(btnColor);

        spnrNumParticles.setModel(new javax.swing.SpinnerNumberModel(0, 0, 999, 1));
        spnrNumParticles.setPreferredSize(new java.awt.Dimension(78, 28));
        add(spnrNumParticles);

        spnrRadius.setModel(new javax.swing.SpinnerNumberModel(1.0d, 0.1d, 99.9d, 0.1d));
        spnrRadius.setMinimumSize(new java.awt.Dimension(41, 28));
        spnrRadius.setPreferredSize(new java.awt.Dimension(78, 28));
        add(spnrRadius);

        spnrMass.setModel(new javax.swing.SpinnerNumberModel(2.0d, 1.0d, 999.0d, 1.0d));
        spnrMass.setPreferredSize(new java.awt.Dimension(78, 28));
        add(spnrMass);

        btnRemoveType.setFont(new java.awt.Font("Lucida Grande", 1, 18));
        btnRemoveType.setText("-");
        btnRemoveType.setPreferredSize(new java.awt.Dimension(50, 29));
        btnRemoveType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveTypeActionPerformed(evt);
            }
        });
        add(btnRemoveType);
    }// </editor-fold>//GEN-END:initComponents

    private void txtFldNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFldNameActionPerformed

}//GEN-LAST:event_txtFldNameActionPerformed

    private void txtFldNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFldNameFocusLost

}//GEN-LAST:event_txtFldNameFocusLost

    private void btnColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnColorActionPerformed
        Color color = JColorChooser.showDialog(this, txtFldName.getText() + " color", btnColor.getBackground());
        if (color != null) {
            btnColor.setBackground(color);
        }
}//GEN-LAST:event_btnColorActionPerformed

    private void btnRemoveTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveTypeActionPerformed
        mainFrame.removeTypeDescriptor(this);
    }//GEN-LAST:event_btnRemoveTypeActionPerformed

public void updateMaxRadius(double maxParticleRadius){
    spnrRadius.setValue(Math.min((Double) spnrRadius.getValue(), maxParticleRadius));
}
    
public ParticleType getTypeDescribed() {
    return new ParticleType((Double) spnrMass.getValue(),
            Units.convert("nm", "m", (Double) spnrRadius.getValue()),
            btnColor.getBackground(),
            txtFldName.getText());
}

protected String getTypeName() {
    return txtFldName.getText();
}

protected Color getTypeColor() {
    return btnColor.getBackground();
}

public int getNumParticles() {
    return (Integer) spnrNumParticles.getValue();
}

protected double getTypeRadius() {
    return 0.0;
}

protected double getTypeMass() {
    return 0.0;
}

@Override
public String toString() {
    return txtFldName.getText();
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnColor;
    private javax.swing.JButton btnRemoveType;
    private javax.swing.JSpinner spnrMass;
    private javax.swing.JSpinner spnrNumParticles;
    private javax.swing.JSpinner spnrRadius;
    private javax.swing.JTextField txtFldName;
    // End of variables declaration//GEN-END:variables

}
