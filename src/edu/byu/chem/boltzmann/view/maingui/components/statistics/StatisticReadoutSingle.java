/*
 * Boltzmann 3D, a kinetic theory demonstrator
 * Copyright (C) 2013 Dr. Randall B. Shirts
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package edu.byu.chem.boltzmann.view.maingui.components.statistics;

import edu.byu.chem.boltzmann.model.statistics.interfaces.Statistic;
import edu.byu.chem.boltzmann.model.statistics.interfaces.SingleAverageStatistic;
import edu.byu.chem.boltzmann.model.statistics.interfaces.StatisticID;
import edu.byu.chem.boltzmann.model.statistics.interfaces.StatisticWithDistribution;
import edu.byu.chem.boltzmann.utils.Units.Unit;
import edu.byu.chem.boltzmann.view.maingui.components.textfields.UnitReadout;
import java.awt.Dimension;
import java.util.Collection;
import java.util.Set;

/**
 *
 * @author Derek Manwaring
 * Aug 2010
 */
public final class StatisticReadoutSingle<UnitType extends Unit<UnitType>> extends 
        javax.swing.JPanel implements StatisticReadout {
    
    private final UnitReadout<UnitType> txtFldValue;
    private final UnitType statisticUnit;
    
    public StatisticReadoutSingle(StatisticID statisticID, Set<UnitType> displayUnits) {
        if (!statisticID.implementsInterface(SingleAverageStatistic.class)) {
            throw new RuntimeException("Cannot create single readout for statistics"
                    + " that are not single average statistics");
        }
        
        initComponents();

        setValueName(statisticID.getDisplayName());

        statisticUnit = displayUnits.iterator().next();
        txtFldValue = new UnitReadout<UnitType>(0.0, statisticUnit, displayUnits);
        txtFldValue.setToolTipText("Prediciton: not available yet");
        
        pnlRight.add(txtFldValue);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlLeft = new javax.swing.JPanel();
        lblValueLabel = new javax.swing.JLabel();
        pnlRight = new javax.swing.JPanel();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        pnlLeft.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        lblValueLabel.setText("Predicted");
        pnlLeft.add(lblValueLabel);

        add(pnlLeft);

        pnlRight.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));
        add(pnlRight);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblValueLabel;
    private javax.swing.JPanel pnlLeft;
    private javax.swing.JPanel pnlRight;
    // End of variables declaration//GEN-END:variables

    public static void alignTextBoxes(int panelWidth, Collection<StatisticReadoutSingle> readouts) {
        int greatestTextFieldWidth = 0;
        for (StatisticReadoutSingle readout: readouts) {
            if (readout.txtFldValue.getPreferredSize().width > greatestTextFieldWidth) {
                greatestTextFieldWidth = readout.txtFldValue.getPreferredSize().width;
            }
        }

        for (StatisticReadoutSingle readout: readouts) {
            readout.txtFldValue.setPreferredSize(new Dimension(greatestTextFieldWidth, 
                    readout.txtFldValue.getPreferredSize().height));
        }
    }

    private void setValue(double value, UnitType unit) {
        txtFldValue.setValue(value, unit);
    }
    
    private void setPrediction(double prediction, UnitType unit) {
        txtFldValue.setPredictionValue(prediction, unit);
    }
    
    private void setValueName(String valueName) {
        lblValueLabel.setText(valueName);
    }
    
    @Override
    public String toString() {
        return lblValueLabel.getText();
    }

    @Override
    @SuppressWarnings("unchecked")
    public void update(Statistic statistic, boolean cumulative, boolean width) {
        if (!(statistic instanceof SingleAverageStatistic))
            throw new RuntimeException("Cannot display information for statistics "
                    + "that are not single average statistics");
        
        SingleAverageStatistic singleAverageStatistic = (SingleAverageStatistic) statistic;
        
        double value, prediction;
        if(width && statistic instanceof StatisticWithDistribution){
            if(cumulative)
                value = ((StatisticWithDistribution) singleAverageStatistic).getCumulativeDistributionWidth(statisticUnit);
            else
                value = ((StatisticWithDistribution) singleAverageStatistic).getCurrentDistributionWidth(statisticUnit);
            prediction = ((StatisticWithDistribution) singleAverageStatistic).getDistributionWidthPrediction(statisticUnit);
        }
        else{
            if(cumulative)
                value = singleAverageStatistic.getCumulativeAverage(statisticUnit);
            else
                value = singleAverageStatistic.getCurrentAverage(statisticUnit);
            prediction = singleAverageStatistic.getPredictionForAverage(statisticUnit);
        }
        
        setValue(value, statisticUnit);
        setPrediction(prediction, statisticUnit);
    }
}
