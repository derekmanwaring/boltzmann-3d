/*
 * Boltzmann 3D, a kinetic theory demonstrator
 * Copyright (C) 2013 Dr. Randall B. Shirts
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package edu.byu.chem.boltzmann.view.maingui.components.statistics;

import edu.byu.chem.boltzmann.model.statistics.parents.StatisticOld;
import edu.byu.chem.boltzmann.model.statistics.StatisticCalculation;
import java.awt.Dimension;
import java.util.Arrays;
import java.util.List;
import javax.swing.JTextField;

/**
 *
 * @author Derek Manwaring
 * Aug 2010
 */
public final class StatisticReadoutDouble extends javax.swing.JPanel {

    private String valueName = "(no value name)";
    private String valueUnits;
    private String value = "(no value)";

    /** Creates new form StatisticReadoutDouble */
    public StatisticReadoutDouble() {
        initComponents();
    }

    public StatisticReadoutDouble(StatisticOld statistic, List<StatisticCalculation> calculationsList) {
        initComponents();
        setValueName(statistic.getDisplayName());
        StatisticCalculation[] calculations = (StatisticCalculation[]) calculationsList.toArray();
        txtFldValue1.setToolTipText(calculations[0].calculationName + ": " + calculations[0].description);
        txtFldValue2.setToolTipText(calculations[1].calculationName + ": " + calculations[1].description);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblValueLabel = new javax.swing.JLabel();
        pnlSpacer = new javax.swing.JPanel();
        txtFldValue1 = new javax.swing.JTextField();
        txtFldValue2 = new javax.swing.JTextField();

        setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 3));

        lblValueLabel.setText("Predicted (m/s):");
        add(lblValueLabel);

        pnlSpacer.setPreferredSize(new java.awt.Dimension(50, 5));

        org.jdesktop.layout.GroupLayout pnlSpacerLayout = new org.jdesktop.layout.GroupLayout(pnlSpacer);
        pnlSpacer.setLayout(pnlSpacerLayout);
        pnlSpacerLayout.setHorizontalGroup(
            pnlSpacerLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 50, Short.MAX_VALUE)
        );
        pnlSpacerLayout.setVerticalGroup(
            pnlSpacerLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 5, Short.MAX_VALUE)
        );

        add(pnlSpacer);

        txtFldValue1.setEditable(false);
        txtFldValue1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtFldValue1.setText("300");
        txtFldValue1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        add(txtFldValue1);

        txtFldValue2.setEditable(false);
        txtFldValue2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtFldValue2.setText("300");
        txtFldValue2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        add(txtFldValue2);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblValueLabel;
    private javax.swing.JPanel pnlSpacer;
    private javax.swing.JTextField txtFldValue1;
    private javax.swing.JTextField txtFldValue2;
    // End of variables declaration//GEN-END:variables

    public static void alignTextFields(List<StatisticReadoutDouble> readouts, int width) {
        int greatestTextFieldWidth = 0;
        for (StatisticReadoutDouble readout: readouts) {
            if (readout.txtFldValue1.getPreferredSize().width > greatestTextFieldWidth) {
                greatestTextFieldWidth = readout.txtFldValue1.getPreferredSize().width;
            }
            if (readout.txtFldValue2.getPreferredSize().width > greatestTextFieldWidth) {
                greatestTextFieldWidth = readout.txtFldValue2.getPreferredSize().width;
            }
        }

        for (StatisticReadoutDouble readout: readouts) {
            readout.txtFldValue1.setPreferredSize(new Dimension(greatestTextFieldWidth, readout.txtFldValue1.getPreferredSize().height));
            readout.txtFldValue2.setPreferredSize(new Dimension(greatestTextFieldWidth, readout.txtFldValue2.getPreferredSize().height));
        }

        for (StatisticReadoutDouble readout: readouts) {
            int widthAdjustment = width - readout.getPreferredSize().width;
            int newWidth = readout.pnlSpacer.getPreferredSize().width + widthAdjustment;
            Dimension newSize = new Dimension(newWidth, readout.pnlSpacer.getPreferredSize().height);
            readout.pnlSpacer.setPreferredSize(newSize);
        }
    }

    public static void alignTextFields(int width, StatisticReadoutDouble... readouts) {
        alignTextFields(Arrays.asList(readouts), width);
    }

    public void setValueName(String valueName) {
        this.valueName = valueName;
        updateValueLabel();
    }

    public void setValueUnits(String units) {
        this.valueUnits = units;
        updateValueLabel();
    }

    public void setValue1(String value) {
        txtFldValue1.setText(value);
    }

    public void setValue2(String value) {
        txtFldValue2.setText(value);
    }

    private void updateValueLabel() {
        if (valueUnits != null) {
            lblValueLabel.setText(valueName +  " (" + valueUnits + "):");
        } else {
            lblValueLabel.setText(valueName + ":");
        }
    }

    JTextField getValue1Field() {
        return txtFldValue1;
    }

    JTextField getValue2Field() {
        return txtFldValue2;
    }

    public void setValues(double[] values) {
        txtFldValue1.setText(String.valueOf(values[0]));
        txtFldValue2.setText(String.valueOf(values[1]));
    }
}
