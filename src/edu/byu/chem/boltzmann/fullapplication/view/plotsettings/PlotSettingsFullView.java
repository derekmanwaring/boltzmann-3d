/*
 * Boltzmann 3D, a kinetic theory demonstrator
 * Copyright (C) 2013 Dr. Randall B. Shirts
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package edu.byu.chem.boltzmann.fullapplication.view.plotsettings;

import edu.byu.chem.boltzmann.controller.ErrorHandler;
import edu.byu.chem.boltzmann.model.statistics.StatUtils;
import edu.byu.chem.boltzmann.model.statistics.interfaces.Range;
import edu.byu.chem.boltzmann.model.statistics.interfaces.StatisticWithDistribution;
import edu.byu.chem.boltzmann.model.statistics.parents.WeightedValueStatistic;
import edu.byu.chem.boltzmann.utils.Units.Unit;
import edu.byu.chem.boltzmann.view.plotsettings.PlotSettingsController;
import edu.byu.chem.boltzmann.view.plotsettings.PlotSettingsView;

/**
 * Created 14 Jun 2011
 * @author Derek Manwaring
 */
public class PlotSettingsFullView extends javax.swing.JPanel implements PlotSettingsView {

    private PlotSettingsController controller;

    private static String DEFAULT_LABEL_TEXT = "Plot X Axis Limits";
    
    private StatisticWithDistribution statistic = null;
    private Unit plotUnits = null;
    
    private String[] lastValidMinMax = new String[] { "0.0", "0.0" };
    
    /** Creates new form View */
    public PlotSettingsFullView() {        
        initComponents();
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public void setCurrentStatistic(StatisticWithDistribution statistic) {
        this.statistic = statistic;
        
        double plotMin = 0.0;
        double plotMax = 0.0;
        plotUnits = null;
        
        if (statistic != null) {
            setControlsEnabled(true);
            
            plotUnits = statistic.getDefaultDisplayUnit(); 
            
            Range plotRange = statistic.getDistributionRange(plotUnits);
            plotMin = plotRange.min;
            plotMax = plotRange.max;
            
        } else {
            setControlsEnabled(false);
        }
        
        txtFldMin.setText(ErrorHandler.format(plotMin, 5));
        txtFldMax.setText(ErrorHandler.format(plotMax, 5));
        
        handleMinMaxChange();
        
        setupLimitLabel();
    }
    
    private void handleMinMaxChange() {
        try {            
            String minString = txtFldMin.getText();
            String maxString = txtFldMax.getText();
            double min = Double.parseDouble(minString);
            double max = Double.parseDouble(maxString);
            
            if (min > max) {
                resetTextToLastValidMinMax();
                return;
            } else {
                lastValidMinMax[0] = minString;
                lastValidMinMax[1] = maxString;
            }                    
        } catch (NumberFormatException ex) {
            resetTextToLastValidMinMax();
        }
    }
    
    private void resetTextToLastValidMinMax() {
        txtFldMin.setText(lastValidMinMax[0]);
        txtFldMax.setText(lastValidMinMax[1]);
    }
    
    private void setControlsEnabled(boolean enabled) {
        lblLimits.setEnabled(enabled);            
        txtFldMin.setEnabled(enabled);
        txtFldMax.setEnabled(enabled);
        lblHyphen.setEnabled(enabled);
        btnOK.setEnabled(enabled);
    }
    
    private void setupLimitLabel() {
        String unitString = "";
        
        if (plotUnits != null) {
            unitString = " (" + plotUnits.getSymbol() + ")";
        }
        
        lblLimits.setText(DEFAULT_LABEL_TEXT + unitString + ":");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        lblLimits = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        txtFldMin = new javax.swing.JTextField();
        lblHyphen = new javax.swing.JLabel();
        txtFldMax = new javax.swing.JTextField();
        btnOK = new javax.swing.JButton();

        jPanel2.setLayout(new java.awt.BorderLayout());

        lblLimits.setText("Plot X Axis Limits:");
        jPanel2.add(lblLimits, java.awt.BorderLayout.WEST);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        txtFldMin.setText("0.0");
        txtFldMin.setPreferredSize(new java.awt.Dimension(84, 28));
        txtFldMin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFldMinActionPerformed(evt);
            }
        });
        txtFldMin.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFldMinFocusLost(evt);
            }
        });
        jPanel1.add(txtFldMin);

        lblHyphen.setText("-");
        jPanel1.add(lblHyphen);

        txtFldMax.setText("0.0");
        txtFldMax.setPreferredSize(new java.awt.Dimension(84, 28));
        txtFldMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFldMaxActionPerformed(evt);
            }
        });
        txtFldMax.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFldMaxFocusLost(evt);
            }
        });
        jPanel1.add(txtFldMax);

        jPanel2.add(jPanel1, java.awt.BorderLayout.EAST);

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(btnOK, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 95, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(btnOK)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings("unchecked")
    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        double newMin = Double.parseDouble(txtFldMin.getText());
        double newMax = Double.parseDouble(txtFldMax.getText());
        
        statistic.setDistributionRange(new Range(newMin, newMax), plotUnits);
        
        controller.hidePlotSettings();
    }//GEN-LAST:event_btnOKActionPerformed

    private void txtFldMinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFldMinActionPerformed
        handleMinMaxChange();
    }//GEN-LAST:event_txtFldMinActionPerformed

    private void txtFldMinFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFldMinFocusLost
        handleMinMaxChange();
    }//GEN-LAST:event_txtFldMinFocusLost

    private void txtFldMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFldMaxActionPerformed
        handleMinMaxChange();
    }//GEN-LAST:event_txtFldMaxActionPerformed

    private void txtFldMaxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFldMaxFocusLost
        handleMinMaxChange();
    }//GEN-LAST:event_txtFldMaxFocusLost

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOK;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblHyphen;
    private javax.swing.JLabel lblLimits;
    private javax.swing.JTextField txtFldMax;
    private javax.swing.JTextField txtFldMin;
    // End of variables declaration//GEN-END:variables
    
    public void attachController(PlotSettingsController controller) {
        this.controller = controller;
    }
    
    protected PlotSettingsController getController() {
        return controller;
    }
}
