/*
 * Boltzmann 3D, a kinetic theory demonstrator
 * Copyright (C) 2013 Dr. Randall B. Shirts
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package edu.byu.chem.boltzmann.fullapplication.view.piston;

import edu.byu.chem.boltzmann.controller.ErrorHandler;
import edu.byu.chem.boltzmann.model.physics.Piston;
import edu.byu.chem.boltzmann.model.physics.Piston.PistonMode;
import edu.byu.chem.boltzmann.utils.Units;
import edu.byu.chem.boltzmann.utils.Units.Length;
import edu.byu.chem.boltzmann.view.piston.PistonController;
import edu.byu.chem.boltzmann.view.piston.PistonView;
import java.awt.event.KeyEvent;

/**
 * View for the piston controls
 * @author Derek Manwaring
 */
public class PistonFullView extends javax.swing.JPanel implements PistonView {
    
    private static int SLIDER_POPUP_Y_OFFSET = -25;

    private PistonController controller;
    
    private int currentPistonPosition = 0;
    private double pistonLength = 0.0;
    private int maximumPistonPosition = 950;

    public PistonFullView() {
        initComponents();
        
        currentPistonPosition = sldrPistonPosition.getValue();
        pistonModeChanged();
        pistonPositionSet();
        
        btnStop.setVisible(false);
    }

    /**
     * Directs this view to use the given controller.
     */
    public void attachController(PistonController controller) {
        this.controller = controller;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGrpPistonMode = new javax.swing.ButtonGroup();
        popMnuPistonPos = new javax.swing.JPopupMenu();
        mnuBtnPistonPos = new javax.swing.JMenuItem();
        sldrPistonPosition = new javax.swing.JSlider();
        lblPistonPosition = new javax.swing.JLabel();
        lblMode = new javax.swing.JLabel();
        radBtnIsothermal = new javax.swing.JRadioButton();
        radBtnAdiabatic = new javax.swing.JRadioButton();
        radBtnInstantaneous = new javax.swing.JRadioButton();
        lblSpeed = new javax.swing.JLabel();
        lblDampFactor = new javax.swing.JLabel();
        spnrDampFactor = new javax.swing.JSpinner();
        lblDampFactorPercent = new javax.swing.JLabel();
        btnMove = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        spnrSpeed = new javax.swing.JSpinner();
        btnStop = new javax.swing.JButton();
        lblNewPosition = new javax.swing.JLabel();
        lblSpeedUnits = new javax.swing.JLabel();

        mnuBtnPistonPos.setText("jMenuItem1");
        popMnuPistonPos.add(mnuBtnPistonPos);

        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        sldrPistonPosition.setMaximum(1000);
        sldrPistonPosition.setSnapToTicks(true);
        sldrPistonPosition.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                sldrPistonPositionMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sldrPistonPositionMouseReleased(evt);
            }
        });
        sldrPistonPosition.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                sldrPistonPositionMouseDragged(evt);
            }
        });

        lblPistonPosition.setText("New Position:");

        lblMode.setText("Compression/Expansion Mode:");

        btnGrpPistonMode.add(radBtnIsothermal);
        radBtnIsothermal.setSelected(true);
        radBtnIsothermal.setText("Isothermal");
        radBtnIsothermal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radBtnIsothermalActionPerformed(evt);
            }
        });

        btnGrpPistonMode.add(radBtnAdiabatic);
        radBtnAdiabatic.setText("Adiabatic");
        radBtnAdiabatic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radBtnAdiabaticActionPerformed(evt);
            }
        });

        btnGrpPistonMode.add(radBtnInstantaneous);
        radBtnInstantaneous.setText("Instantaneous");
        radBtnInstantaneous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radBtnInstantaneousActionPerformed(evt);
            }
        });

        lblSpeed.setText("Speed:");

        lblDampFactor.setText("Damp factor :");

        spnrDampFactor.setModel(new javax.swing.SpinnerNumberModel(10.0d, 0.0d, 100.0d, 10.0d));

        lblDampFactorPercent.setText("%");

        btnMove.setText("Move");
        btnMove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveActionPerformed(evt);
            }
        });

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        spnrSpeed.setModel(new javax.swing.SpinnerNumberModel(0.2d, 1.0E-5d, 1000.0d, 0.02d));

        btnStop.setText("Stop");
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        lblNewPosition.setText("position");

        lblSpeedUnits.setText("nm/ps");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(sldrPistonPosition, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 333, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createSequentialGroup()
                                .add(lblPistonPosition)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(lblNewPosition))
                            .add(lblMode)))
                    .add(layout.createSequentialGroup()
                        .add(28, 28, 28)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(radBtnAdiabatic)
                            .add(layout.createSequentialGroup()
                                .add(radBtnIsothermal)
                                .add(37, 37, 37)
                                .add(lblDampFactor)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(spnrDampFactor, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(10, 10, 10)
                                .add(lblDampFactorPercent))
                            .add(radBtnInstantaneous)))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(lblSpeed)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(spnrSpeed, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 88, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(lblSpeedUnits)))
                .addContainerGap(64, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(208, Short.MAX_VALUE)
                .add(btnStop)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btnClose)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(btnMove)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblPistonPosition)
                    .add(lblNewPosition))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(sldrPistonPosition, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lblMode)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                    .add(lblDampFactor)
                    .add(spnrDampFactor, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(radBtnIsothermal)
                    .add(lblDampFactorPercent))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(radBtnAdiabatic)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(radBtnInstantaneous)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                    .add(spnrSpeed, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblSpeed)
                    .add(lblSpeedUnits))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 25, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnMove)
                    .add(btnClose)
                    .add(btnStop))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void radBtnAdiabaticActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radBtnAdiabaticActionPerformed
        pistonModeChanged();
}//GEN-LAST:event_radBtnAdiabaticActionPerformed

    private void radBtnInstantaneousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radBtnInstantaneousActionPerformed
        pistonModeChanged();
}//GEN-LAST:event_radBtnInstantaneousActionPerformed

    private void btnMoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveActionPerformed
        int newPosition = sldrPistonPosition.getValue();
        PistonMode moveMode = getPistonMode();
        double moveSpeed = getPistonSpeed();
        
        //Move piston needs new position as value from 0.0 to 1.0 (10% of arena = 0.1)
        controller.movePiston(newPosition / 1000.0, moveMode, moveSpeed);
                
        currentPistonPosition = newPosition;
}//GEN-LAST:event_btnMoveActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        controller.hidePistonControls();
}//GEN-LAST:event_btnCloseActionPerformed

    private void radBtnIsothermalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radBtnIsothermalActionPerformed
        pistonModeChanged();
    }//GEN-LAST:event_radBtnIsothermalActionPerformed

    private void sldrPistonPositionMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sldrPistonPositionMouseReleased
        pistonPositionSet();
//        popMnuPistonPos.setVisible(false);
    }//GEN-LAST:event_sldrPistonPositionMouseReleased

    private void sldrPistonPositionMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sldrPistonPositionMousePressed
        setPistonPosText();
//        popMnuPistonPos.setLocation(evt.getXOnScreen(), evt.getYOnScreen() + SLIDER_POPUP_Y_OFFSET);
//        popMnuPistonPos.setVisible(true);
    }//GEN-LAST:event_sldrPistonPositionMousePressed

    private void sldrPistonPositionMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sldrPistonPositionMouseDragged
        setPistonPosText();
    }//GEN-LAST:event_sldrPistonPositionMouseDragged

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        controller.stopPiston();
    }//GEN-LAST:event_btnStopActionPerformed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased

    }//GEN-LAST:event_formKeyReleased

    private void pistonPositionSet() {
        boolean canExpandInstantaneously = 
                sldrPistonPosition.getValue() <= currentPistonPosition;
        
        if (!canExpandInstantaneously) {
            if (sldrPistonPosition.getValue() > maximumPistonPosition) {
                sldrPistonPosition.setValue(maximumPistonPosition);
            }
            
            if (radBtnInstantaneous.isSelected()) {
                sldrPistonPosition.setValue(currentPistonPosition);
            } else {
                radBtnInstantaneous.setEnabled(false);                
            }
        } else {
            radBtnInstantaneous.setEnabled(true);
        }        
        
        if (sldrPistonPosition.getValue() == currentPistonPosition) {
            btnMove.setEnabled(false);
        } else {
            btnMove.setEnabled(true);
        }
        
        setPistonPosText();
    }
    
    private void pistonModeChanged() {
        boolean isothermal = radBtnIsothermal.isSelected();
       
        setDampFactorEnabled(isothermal);
        
        boolean enableSpeed = !radBtnInstantaneous.isSelected();
        
        setSpeedEnabled(enableSpeed);
    }
    
    private PistonMode getPistonMode() {
        if (radBtnAdiabatic.isSelected()) {
            return PistonMode.ADIABATIC;
        } else if (radBtnInstantaneous.isSelected()) {
            return PistonMode.INSTANTANEOUS;
        } else if (radBtnIsothermal.isSelected()) {
            return PistonMode.ISOTHERMAL;
        } else {
            return Piston.DEFAULT_MODE;
        }
    }
    
    private double getPistonSpeed() {
        double speedBadUnits = (Double) spnrSpeed.getValue();
        return Units.convert("nm/ps", "m/s", speedBadUnits);
    }
    
    private void setDampFactorEnabled(boolean enabled) {        
        lblDampFactor.setEnabled(enabled);
        spnrDampFactor.setEnabled(enabled);
        lblDampFactorPercent.setEnabled(enabled);        
    }
    
    private void setSpeedEnabled(boolean enabled) {
        lblSpeed.setEnabled(enabled);
        spnrSpeed.setEnabled(enabled);  
        lblSpeedUnits.setEnabled(enabled);
    }
    
    private void setPistonPosText() {
        double sliderPosPercent = 100.0 - (double) sldrPistonPosition.getValue() / 10.0;
        double sliderPosArena = getPistonArenaPos(sliderPosPercent);
        lblNewPosition.setText(ErrorHandler.format(sliderPosPercent, 4) +
                "% (" +
                ErrorHandler.format(sliderPosArena, 4) +
                " " + Length.NANOMETER.unitSymbol + ")");
    }
    
    private double getPistonArenaPos(double pistonPosPercent) {
        return (pistonLength - (pistonLength * pistonPosPercent / 100.0));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.ButtonGroup btnGrpPistonMode;
    private javax.swing.JButton btnMove;
    private javax.swing.JButton btnStop;
    private javax.swing.JLabel lblDampFactor;
    private javax.swing.JLabel lblDampFactorPercent;
    private javax.swing.JLabel lblMode;
    private javax.swing.JLabel lblNewPosition;
    private javax.swing.JLabel lblPistonPosition;
    private javax.swing.JLabel lblSpeed;
    private javax.swing.JLabel lblSpeedUnits;
    private javax.swing.JMenuItem mnuBtnPistonPos;
    private javax.swing.JPopupMenu popMnuPistonPos;
    private javax.swing.JRadioButton radBtnAdiabatic;
    private javax.swing.JRadioButton radBtnInstantaneous;
    private javax.swing.JRadioButton radBtnIsothermal;
    private javax.swing.JSlider sldrPistonPosition;
    private javax.swing.JSpinner spnrDampFactor;
    private javax.swing.JSpinner spnrSpeed;
    // End of variables declaration//GEN-END:variables
    
    public void setPistonMoveEnabled(boolean enabled) {
        lblPistonPosition.setEnabled(enabled);
        lblNewPosition.setEnabled(enabled);
        sldrPistonPosition.setEnabled(enabled);
        
        lblMode.setEnabled(enabled);
        
        radBtnAdiabatic.setEnabled(enabled);
        radBtnIsothermal.setEnabled(enabled);
        
        if (enabled == false) {
            setDampFactorEnabled(false);
            setSpeedEnabled(false);
            
            radBtnInstantaneous.setEnabled(false);
            btnMove.setEnabled(false);
        } else {
            pistonModeChanged();
            pistonPositionSet();
        }        
        
        btnStop.setVisible(!enabled);
    }

    public void setPistonPosition(double pistonPosition) {
        int position = (int) (pistonPosition * 1000.0);
        currentPistonPosition = position;
        sldrPistonPosition.setValue(position);
        pistonPositionSet();
    }

    public void setPistonLength(double pistonLength) {
        this.pistonLength = Units.convert("m", "nm", pistonLength);
        setPistonPosText();
    }

    public void setMaxPistonPosition(double maxPistonPos) {
        maximumPistonPosition = (int) (maxPistonPos * 10.0);
    }

    public void setPistonPos(int i) {
        sldrPistonPosition.setValue(i);
        pistonPositionSet();
    }

    public PistonController getController() {
        return controller;
    }
}
